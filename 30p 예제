#include <stdio.h>
#include <stdlib.h>


/// <summary>
/// 30P 사탕나눠주기
/// </summary>

//max heap
#define MAX_ELEMENT 200
typedef struct {
	int key;
}element;

typedef struct {
	element heap[MAX_ELEMENT];
	int heap_size;
}HeapType;


void insert_max_heap(HeapType *h, element item) {
	int i;
	i = ++(h->heap_size);
	while ((i != 1) && (item.key > h->heap[i / 2].key)) {
		h->heap[i] = h->heap[i / 2];
		i /= 2;
	}
	h->heap[i] = item;
}
int delete_max_heap(HeapType *h) {
	int parent, child;
	element item, temp;

	item = h->heap[1];
	temp = h->heap[(h->heap_size)--];
	parent = 1;
	child = 2;
	while (child <= h->heap_size) {
		//Find smaller child node
		if ((child < h->heap_size) && (h->heap[child].key) < h->heap[child + 1].key)
			child++;
		if (temp.key >= h->heap[child].key) break;
		//Move down one level
		h->heap[parent] = h->heap[child];
		parent = child;
		child *= child;
	}
	h->heap[parent] = temp;
	return item.key;
} 

void init(HeapType* h) {
	h->heap_size = 0;
}

int sumofArray(int arr[]) {
	int sum = 0; 
	for (int i = 0; i < sizeof(arr) / sizeof(int); i++) {
		sum += arr[i];
	}
	return sum;
}
int main() {
	int N = 10;  //N <= 30 number of candies
	int weight[20] = {0, };	 // 1<= weight <= 20

	//set weights for every candies
	for (int i = 0; i < N; i++) {
		weight[i] = rand() % 20+1;
	}
	//fill out max heap
	//***중복되지 않는 코드로 만들 수 있는 방법은 없을까??
	element e1, e2, e3, e4, e5, e6, e7, e8, e9, e10;
	e1.key = weight[0];
	e2.key = weight[1];
	e3.key = weight[2];
	e4.key = weight[3];
	e5.key = weight[4];
	e6.key = weight[5];
	e7.key = weight[6];
	e8.key = weight[7];
	e9.key = weight[8];
	e10.key = weight[9];


	HeapType heap;
	init(&heap);

	//insertion
	insert_max_heap(&heap, e1);
	insert_max_heap(&heap, e2);
	insert_max_heap(&heap, e3);
	insert_max_heap(&heap, e4);
	insert_max_heap(&heap, e5);
	insert_max_heap(&heap, e6);
	insert_max_heap(&heap, e7);
	insert_max_heap(&heap, e8);
	insert_max_heap(&heap, e9);
	insert_max_heap(&heap, e10);

	
	//init every arr by 0
	int A[] = { 0, };
	int B[] = { 0, };
	int C[] = { 0, };

	int min;
	char min_char;
	element deleted;
	int num_a=0 , num_b=0, num_c = 0;
	for (int j = 0; j < N; j++) {
		//find min weighted array
		
		if (sumofArray(A) < sumofArray(B)) {
			min = sumofArray(A);
			min_char = 'A';
		}

		else {
			min = sumofArray(B);
			min_char = 'B';

		}
		if (min > sumofArray(C)) {
			min = sumofArray(C);
			min_char = 'C';
		}
		deleted.key = delete_max_heap(&heap);

		switch (min_char)
		{
		case 'A':
			A[num_a] = deleted.key;
			num_a++;
			break;
		case 'B':
			B[num_b] = deleted.key;
			num_b++;
			break;
		case 'C':
			C[num_c] = deleted.key;
			num_c++;
			break;
		default:
			break;
		}
	}
	int sum_a = sumofArray(A);
	int sum_b = sumofArray(B);
	int sum_c = sumofArray(C);

	//find min and max
	int max, min;
	if (sum_a < sum_b) {
		min = sum_a;
		max = sum_b;
	}
	else {
		min = sum_a;
		max = sum_b;
	}
	if (min > sum_c) {
		min = sum_c;
	}
	if (max < sum_c) {
		max = sum_c;
	}

	int result = max - min;
	printf("%d", result);
	return 0;
}
